from GenerateRandomWalk import GenerateRandomWalk
import sys
import argparse
import pdb
from time import time

def parse_args():
    parser = argparse.ArgumentParser(description="Arguments: Assumes index currected files are given.")
    parser.add_argument('--dir', nargs='?', default='/path/',  help   ='Input data dir.')
    parser.add_argument('--dataset', nargs='?', default='music.train',  help='Choose a dataset. (music.train)')
    parser.add_argument('--trust', type=int, default=0,       help='(0, 1).')
    parser.add_argument('--numwalks', type=int, default=40,       help='number of walks per node.')
    parser.add_argument('--walklength', type=int, default=100,    help='walklength per node.')
    parser.add_argument('--min_len_to_keep', type=int, default=5, help ='min length should be there for the sentences generated by random walk or atleast that many different tokens in sent.')
    parser.add_argument('--metapath', nargs='?', default='UI',    help='metapath. ') #keep it UI for social matrix also. It is taken care inside code
    parser.add_argument('--execution', nargs='?',default='m',    help   ='m --> metapath generation.')
    
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    print('Arguments: ',args , "\n")
    
    dirname     = args.dir
    fname       = args.dataset 
    numwalks    = args.numwalks
    walklength  = args.walklength
    metapath    = args.metapath

    print(dirname,fname,numwalks,walklength)

    if 'm' in args.execution:
        t1 = time()
        outfilename  = dirname + fname + '.walks.' + metapath
        if args.trust == 1:
            grw          = GenerateRandomWalk(dirname + fname,trust=True)
        else:
            grw          = GenerateRandomWalk(dirname + fname,trust=False)
        grw.generate_walks(outfilename, numwalks=numwalks,walklength=walklength,metapath=metapath,min_len_to_keep=args.min_len_to_keep)
        print('WALK GENERATION done')
        print('time taken for metapath: {:.2f}s'.format(time()-t1))
